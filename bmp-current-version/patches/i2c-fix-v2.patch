From db5736b690ebf54487c0186abf40ec79c6c28f2d Mon Sep 17 00:00:00 2001
From: Jaroslav Malec <dzardacz@gmail.com>
Date: Sat, 2 Oct 2021 00:47:23 +0200
Subject: [PATCH] Reduce possibility of freezing in STM32 I2C v2

---
 .../libopencm3/stm32/common/i2c_common_v2.h   |  2 ++
 lib/stm32/common/i2c_common_v2.c              | 21 ++++++++++++++++++-
 2 files changed, 22 insertions(+), 1 deletion(-)

diff --git a/include/libopencm3/stm32/common/i2c_common_v2.h b/include/libopencm3/stm32/common/i2c_common_v2.h
index 316d0f1eeb..23f60f2f6e 100644
--- a/include/libopencm3/stm32/common/i2c_common_v2.h
+++ b/include/libopencm3/stm32/common/i2c_common_v2.h
@@ -407,6 +407,7 @@ void i2c_peripheral_enable(uint32_t i2c);
 void i2c_peripheral_disable(uint32_t i2c);
 void i2c_send_start(uint32_t i2c);
 void i2c_send_stop(uint32_t i2c);
+bool i2c_stop_detected(uint32_t i2c);
 void i2c_clear_stop(uint32_t i2c);
 void i2c_set_own_7bit_slave_address(uint32_t i2c, uint8_t slave);
 void i2c_set_own_10bit_slave_address(uint32_t i2c, uint16_t slave);
@@ -434,6 +435,7 @@ bool i2c_is_start(uint32_t i2c);
 void i2c_enable_autoend(uint32_t i2c);
 void i2c_disable_autoend(uint32_t i2c);
 bool i2c_nack(uint32_t i2c);
+void i2c_clear_nack(uint32_t i2c);
 bool i2c_busy(uint32_t i2c);
 bool i2c_transmit_int_status(uint32_t i2c);
 bool i2c_transfer_complete(uint32_t i2c);
diff --git a/lib/stm32/common/i2c_common_v2.c b/lib/stm32/common/i2c_common_v2.c
index 426219c6bf..352277cb72 100644
--- a/lib/stm32/common/i2c_common_v2.c
+++ b/lib/stm32/common/i2c_common_v2.c
@@ -301,6 +301,16 @@ bool i2c_nack(uint32_t i2c)
 	return (I2C_ISR(i2c) & I2C_ISR_NACKF);
 }
 
+void i2c_clear_nack(uint32_t i2c)
+{
+	I2C_ICR(i2c) |= I2C_ICR_NACKCF;
+}
+
+bool i2c_stop_detected(uint32_t i2c)
+{
+	return (I2C_ISR(i2c) & I2C_ISR_STOPF);
+}
+
 bool i2c_busy(uint32_t i2c)
 {
 	return (I2C_ISR(i2c) & I2C_ISR_BUSY);
@@ -415,7 +425,16 @@ void i2c_transfer7(uint32_t i2c, uint8_t addr, const uint8_t *w, size_t wn, uint
 				if (i2c_transmit_int_status(i2c)) {
 					wait = false;
 				}
-				while (i2c_nack(i2c)); /* FIXME Some error */
+				if (i2c_stop_detected(i2c)) {
+					/* Clear potential stop detection */
+					i2c_clear_stop(i2c);
+				}
+				if (i2c_nack(i2c)) {
+					/* Stop transaction on nack */
+					i2c_clear_nack(i2c);
+					i2c_send_stop(i2c);
+					return;
+				}
 			}
 			i2c_send_data(i2c, *w++);
 		}
